/**
 * Node dependencies.
 */
const { join } = require( 'path' );
const spawnSync = require( 'child_process' ).spawnSync;

const modules = [
	[ 'core', {
		'Autogenerated actions': 'packages/core-data/src/actions.js',
		'Autogenerated selectors': 'packages/core-data/src/selectors.js',
	} ],
	'core/annotations',
	'core/blocks',
	'core/block-editor',
	'core/editor',
	'core/edit-post',
	'core/notices',
	'core/nux',
	'core/viewport',
];

modules.forEach( ( entry ) => {
	if ( ! Array.isArray( entry ) ) {
		entry = [ entry, {
			'Autogenerated actions': `packages/${ entry.replace( 'core/', '' ) }/src/store/actions.js`,
			'Autogenerated selectors': `packages/${ entry.replace( 'core/', '' ) }/src/store/selectors.js`,
		} ];
	}
	const [ namespace, targets ] = entry;

	Object.entries( targets ).forEach( ( [ token, target ] ) => {
		// Note that this needs to be a sync process for each output file that is updated:
		// until docgen provides a way to update many tokens at once, we need to make sure
		// the output file is updated before starting the second pass for the next token.
		const { status, stderr } = spawnSync(
			join( __dirname, '..', '..', 'node_modules', '.bin', 'docgen' ),
			[
				target,
				`--output docs/designers-developers/developers/data/data-${ namespace.replace( '/', '-' ) }.md`,
				'--to-token',
				`--use-token "${ token }"`,
				'--ignore "/unstable|experimental/i"',
			],
			{ shell: true },
		);

		if ( status !== 0 ) {
			throw stderr.toString();
		}
	} );
} );
