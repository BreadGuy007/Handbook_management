buildscript {
    def buildGutenbergMobileJSBundle =
            System.getenv('SUPPRESS_GUTENBERG_MOBILE_JS_BUNDLE_BUILD').asBoolean()
            ? false : (rootProject.ext.has("buildGutenbergMobileJSBundle")
                    && rootProject.ext.buildGutenbergMobileJSBundle)

    ext.kotlinVersion = '1.3.61'

    repositories {
        jcenter()
        google()

        if (buildGutenbergMobileJSBundle) {
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'com.android.tools.build:gradle:3.4.2'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'

        if (buildGutenbergMobileJSBundle) {
            classpath 'com.github.node-gradle:gradle-node-plugin:3.0.0-rc2'
        }
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'kotlin-android'

def buildGutenbergMobileJSBundle =
        System.getenv('SUPPRESS_GUTENBERG_MOBILE_JS_BUNDLE_BUILD').asBoolean()
        ? false : (rootProject.ext.has("buildGutenbergMobileJSBundle")
                && rootProject.ext.buildGutenbergMobileJSBundle)

def tempFolder = "${System.getenv('TMPDIR')}/jsbundle/${System.getenv('VERSION')}"
def nodeFolder = file("${tempFolder}/nodejs")
def npmFolder = file("${tempFolder}/npm")

if (buildGutenbergMobileJSBundle) {
    println 'Building the Gutenberg Mobile JS bundle'

    apply plugin: 'com.github.node-gradle.node'

    node {
        // Version of node to use.
        version = '12.18.1'

        // Version of npm to use.
        npmVersion = '6.14.5'

        // Base URL for fetching node distributions (change if you have a mirror).
        distBaseUrl = 'https://nodejs.org/dist'

        // If true, it will download node using above parameters.
        // If false, it will try to use globally installed node.
        download = true

        // Set the work directory for unpacking node
        workDir = file(nodeFolder)

        // Set the work directory for NPM
        npmWorkDir = file(npmFolder)

        // Set the work directory where node_modules should be located
        nodeModulesDir = file("${project.projectDir}/../../../../")
    }

    npmInstall {
        args = ['--prefer-offline']
    }
}

// import the `readReactNativeVersion()` function
apply from: 'https://gist.githubusercontent.com/hypest/742448b9588b3a0aa580a5e80ae95bdf/raw/8eb62d40ee7a5104d2fcaeff21ce6f29bd93b054/readReactNativeVersion.gradle'

// import the `readHashedVersion()` function
apply from: 'https://gist.githubusercontent.com/hypest/ceaf20a8e7d9b8404e4a5ff2e6c36650/raw/e1460a128e4b9863963410d719c7d44c3adefd02/readHashedVersion.gradle'

// import the `waitJitpack()` function
apply from: 'https://gist.githubusercontent.com/hypest/f526fe0775dedce0ce0133f1400d22a4/raw/0008b271a0d28fc79957fd3c2a027f57e98f796a/wait-jitpack.gradle'

group='com.github.wordpress-mobile.gutenberg-mobile'

// fallback flag value for when lib is compiled individually (e.g. via jitpack)
project.ext.buildGutenbergFromSource = false

def hermesOriginalPath = "../../../node_modules/hermes-engine/android/";
def hermesPath = hermesOriginalPath;
def buildAssetsFolder = 'build/assets'

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
    }
    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            assets.srcDirs += buildAssetsFolder
        }
    }
}

repositories {
    google()
    jcenter()

    maven { url "https://jitpack.io" }

    if (rootProject.ext.buildGutenbergFromSource) {
        // If building from source, use the local sources from node_modules
        def nodeModulesPath = "${project.buildDir}/../../../node_modules/"
        maven { url "${nodeModulesPath}/react-native/android" }
    } else {
        // If not building from source (e.g. Jitpack), use the bintray repo so a local RN setup is not needed
        def reactNativeRepo = 'https://dl.bintray.com/wordpress-mobile/react-native-mirror/'
        println "Will use the RN maven repo at ${reactNativeRepo}"
        maven { url reactNativeRepo }
    }
}

dependencies {
    implementation project(':@wordpress_react-native-aztec')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

    implementation "org.wordpress:utils:1.22"

    // For animated GIF support
    implementation 'com.facebook.fresco:animated-gif:2.0.0'

    implementation 'com.google.android.material:material:1.1.0'

    if (rootProject.ext.buildGutenbergFromSource) {
        println "using gutenberg from source"
        implementation project(':react-native-linear-gradient')
        implementation project(':react-native-svg')
        implementation project(':react-native-video')
        implementation project(':@react-native-community_slider')
        implementation project(':react-native-get-random-values')
        implementation project(':@react-native-community_masked-view')
        implementation project(':react-native-gesture-handler')
        implementation project(':react-native-screens')
        implementation project(':react-native-safe-area-context')
        implementation project(':react-native-reanimated')

        implementation 'com.facebook.react:react-native:+'
    } else {
        hermesPath = "./vendor/hermes-engine/";

        implementation (waitJitpack('com.github.wordpress-mobile', 'react-native-svg', readHashedVersion('../../react-native-editor/package.json', 'react-native-svg', 'dependencies')))
        implementation (waitJitpack('com.github.wordpress-mobile', 'react-native-video', readHashedVersion('../../react-native-editor/package.json', 'react-native-video', 'dependencies')))
        implementation (waitJitpack('com.github.wordpress-mobile', 'react-native-linear-gradient', readHashedVersion('../../react-native-editor/package.json', 'react-native-linear-gradient', 'dependencies')))
        implementation (waitJitpack('com.github.wordpress-mobile', 'react-native-slider', readHashedVersion('../../react-native-editor/package.json', '@react-native-community/slider', 'dependencies')))
        implementation (waitJitpack('com.github.wordpress-mobile', 'react-native-get-random-values', readHashedVersion('../../react-native-editor/package.json', 'react-native-get-random-values', 'dependencies')))
        implementation (waitJitpack('com.github.wordpress-mobile', 'react-native-masked-view', readHashedVersion('../../react-native-editor/package.json', '@react-native-community/masked-view', 'dependencies')))
        implementation (waitJitpack('com.github.wordpress-mobile', 'react-native-gesture-handler', readHashedVersion('../../react-native-editor/package.json', 'react-native-gesture-handler', 'dependencies')))
        implementation (waitJitpack('com.github.wordpress-mobile', 'react-native-screens', readHashedVersion('../../react-native-editor/package.json', 'react-native-screens', 'dependencies')))
        implementation (waitJitpack('com.github.wordpress-mobile', 'react-native-safe-area-context', readHashedVersion('../../react-native-editor/package.json', 'react-native-safe-area-context', 'dependencies')))
        implementation (waitJitpack('com.github.wordpress-mobile', 'react-native-reanimated', readHashedVersion('../../react-native-editor/package.json', 'react-native-reanimated', 'dependencies')))

        // FIXME Temporary fix to get Jitpack builds to green while I work on a solution without hardcoded values.
        //def rnVersion = readReactNativeVersion('../package.json', 'peerDependencies')
        def rnVersion = '0.61.5'
        implementation "com.facebook.react:react-native:${rnVersion}"
    }

    debugImplementation files(hermesPath + "hermes-debug.aar")
    releaseImplementation files(hermesPath + "hermes-release.aar")
}

boolean isBundleUpToDate() {
    return project.hasProperty('isBundleUpToDate') && isBundleUpToDate
}

if (buildGutenbergMobileJSBundle) {
    def bundleName = 'index.android.bundle'
    def mobileGutenbergRootDir = '../../../..'

    task bundleUpToDateCheck {
        description("Checks if the inputs to the javascript bundle and the bundle itself are unchanged. \
If they are changed, the isBundleUpToDate flag is switched to false. That flag is used by other tasks.")

        def dirs = [mobileGutenbergRootDir]
        def bundlePath = file("$mobileGutenbergRootDir/bundle").absolutePath
        file(mobileGutenbergRootDir).eachDirRecurse { dir ->
            def isRelevantDir = !['react-native-bridge/android/build/intermediates',
                                  bundlePath,
                                  'node_modules'].any { dir.absolutePath.contains(it) } &&
                    !dir.name.startsWith('symlinked')
            if (isRelevantDir) {
                dirs << dir
            }
        }

        def isRelevantFile = { it.name.endsWithAny('.js', '.css', '.scss') || it.name == 'package.json' }
        def inputFiles = []
        dirs.forEach { dir ->
            file(dir).eachFile {
                if (isRelevantFile(it)) {
                    inputFiles << it
                }
            }
        }

        inputs.files(inputFiles)

        // We cannot use the bundle file itself as an output because it does not yet exist when this
        // task finishes. Nevertheless, we have to declare something as an output because only tasks
        // with outputs are run incrementally, so we're declaring a file that does not exist as the
        // output. Since that file never exists, that "output" will always be considered "up-to-date".
        outputs.file("nonexistentfile")

        // Using onlyIf here as a hack to run this check at the time of execution even if the task
        // is otherwise up to date. For example, even if the task is up to date the isBundleUpToDate value
        // should be false if the bundle file does not exist at the time this task runs. This must be run
        // at execution time to catch the case where the clean task is also running and would remove the
        // bundle file between the configuration phase and the execution of this task.
        onlyIf {
            project.ext.isBundleUpToDate = file("$buildAssetsFolder/$bundleName").exists()
            true
        }

        // If this task runs, that means some of the inputs have changed, and the isBundleUpToDate
        // flag needs should be false so that the bundle is rebuilt.
        doLast {
            project.ext.isBundleUpToDate = false
        }
    }

    npmInstall.dependsOn bundleUpToDateCheck
    npmInstall.onlyIf { !isBundleUpToDate() }

    task buildJSBundle(type: NpmTask) {
        dependsOn bundleUpToDateCheck
        onlyIf { !isBundleUpToDate() }

        args = ['run', 'bundle:android']
    }

    task backupHermesDebugAAR(type: Copy) {
        dependsOn bundleUpToDateCheck
        onlyIf { !isBundleUpToDate() }

        def origFileName = 'hermes-debug.aar'
        def origWithPath = hermesOriginalPath + origFileName
        from origWithPath
        into hermesPath
        doLast {
            println "Done backing up Hermes debug AARs"
        }
    }

    task backupHermesReleaseAAR(type: Copy) {
        dependsOn bundleUpToDateCheck
        onlyIf { !isBundleUpToDate() }

        def origFileName = 'hermes-release.aar'
        def origWithPath = hermesOriginalPath + origFileName
        from origWithPath
        into hermesPath
        doLast {
            println "Done backing up Hermes release AARs"
        }
    }

    task copyJSBundle(type: Copy) {
        dependsOn bundleUpToDateCheck
        onlyIf { !isBundleUpToDate() }

        def origFileName = 'App.js'
        def origWithPath = "$mobileGutenbergRootDir/bundle/android/${origFileName}"
        from origWithPath
        into buildAssetsFolder
        rename origFileName, bundleName

        // Prevent this task from silently failing
        // Using onlyIf as a bit of a hack to perform this check at the time of execution
        onlyIf {
            if (inputs.sourceFiles.empty) {
                throw new StopExecutionException("ERROR: Could not find bundle file to copy.")
            }
            true
        }

        doLast {
            println "Done copying the Android JS bundle to assets folder"
        }
    }

    def nodeModulesFolders = ["$mobileGutenbergRootDir/node_modules", "$mobileGutenbergRootDir/gutenberg/node_modules"] as String[]
    task cleanupNodeModulesFolders(type: Delete) {
        doFirst {
            println "Deleting node_modules folders"
        }
        dependsOn bundleUpToDateCheck
        onlyIf { !isBundleUpToDate() }

        delete nodeModulesFolders
    }

    task resetExtractedRNTools(type: Delete) {
        doFirst {
            println "Deleting temporary folders with extracted RN tools"
        }
        dependsOn bundleUpToDateCheck
        onlyIf { !isBundleUpToDate() }
        delete nodeFolder, npmFolder
    }

    preBuild.dependsOn(cleanupNodeModulesFolders)
    cleanupNodeModulesFolders.dependsOn(backupHermesDebugAAR)
    backupHermesDebugAAR.dependsOn(backupHermesReleaseAAR)
    backupHermesReleaseAAR.dependsOn(copyJSBundle)
    copyJSBundle.dependsOn(buildJSBundle)
    buildJSBundle.dependsOn(npmInstall)
    nodeSetup.dependsOn(resetExtractedRNTools)
    npmSetup.dependsOn(resetExtractedRNTools)

    clean {
        doFirst {
            println "Executing extended clean task that also deletes node_modules folders"
        }
        delete nodeModulesFolders
    }
}
