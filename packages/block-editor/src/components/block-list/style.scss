// This remove the margins set here: https://github.com/WordPress/gutenberg/blob/17e5c2d870d84fb6de48dcd5bc3c38cd0c0fb0d0/packages/block-library/src/editor.scss#L56
// It removes the margins around blocks when a BlockPreview is rendered in the block style selector
.block-editor-block-styles .block-editor-block-list__block {
	margin: 0;
}

/**
 * Notices & Block Selected/Hover Styles.
 */

.block-editor-block-list__layout .block-editor-block-list__block,
.block-editor-block-list__layout .block-list-appender {
	position: relative;

	// Between-blocks dropzone line indicator.
	&.is-drop-target::before {
		content: "";
		position: absolute;
		z-index: 0;
		pointer-events: none;
		transition: border-color 0.1s linear, border-style 0.1s linear, box-shadow 0.1s linear;
		top: -$default-block-margin / 2;
		right: 0;
		left: 0;
		border-top: 4px solid var(--wp-admin-theme-color);
	}

	&.is-drop-target.is-dropping-horizontally::before {
		top: 0;
		bottom: 0;
		// Drop target border-width plus a couple of pixels so that the border looks between blocks.
		left: -6px;
		border-top: none;
		border-left: 4px solid var(--wp-admin-theme-color);
	}
}

/**
 * Cross-Block Selection
 */

.block-editor-block-list__layout {
	position: relative;

	// The primary indicator of selection in text is the native selection marker.
	// When selecting multiple blocks, we provide an additional selection indicator.
	.is-navigate-mode & .block-editor-block-list__block.is-selected,
	.is-navigate-mode & .block-editor-block-list__block.is-hovered,
	.block-editor-block-list__block.is-highlighted,
	.block-editor-block-list__block.is-multi-selected {

		&::after {
			// Show selection borders around every non-nested block's actual footprint.
			position: absolute;
			z-index: 1;
			pointer-events: none;
			content: "";
			top: $border-width;
			bottom: $border-width;
			left: $border-width;
			right: $border-width;

			// Everything else.
			// 2px outside.
			box-shadow: 0 0 0 $border-width-focus var(--wp-admin-theme-color);
			border-radius: $radius-block-ui - $border-width; // Border is outset, so so subtract the width to achieve correct radius.

			// Windows High Contrast mode will show this outline.
			outline: 2px solid transparent;

			// Show a lighter color for dark themes.
			.is-dark-theme & {
				box-shadow: 0 0 0 $border-width-focus $dark-theme-focus;
			}
		}

		// Provide exceptions for placeholders.
		.components-placeholder {
			::selection {
				background: transparent;
			}
		}
	}

	.is-navigate-mode & .block-editor-block-list__block.is-hovered:not(.is-selected)::after {
		box-shadow: 0 0 0 1px $gray-600;
	}

	.is-block-moving-mode & .block-editor-block-list__block.has-child-selected {
		box-shadow: 0 0 0 $border-width-focus var(--wp-admin-theme-color);
		outline: $border-width-focus solid transparent;
	}

	.is-block-moving-mode & .block-editor-block-list__block.is-selected {

		&::before {
			content: "";
			position: absolute;
			z-index: 0;
			pointer-events: none;
			transition:
				border-color 0.1s linear,
				border-style 0.1s linear,
				box-shadow 0.1s linear;
			right: 0;
			left: 0;
			top: -$default-block-margin / 2;
			border-radius: $radius-block-ui;
			border-top: 4px solid $gray-400;
		}

		&::after {
			content: none;
		}
	}

	.is-block-moving-mode.can-insert-moving-block & .block-editor-block-list__block.is-selected {
		&::before {
			border-color: var(--wp-admin-theme-color);
		}
	}
}


.is-block-moving-mode.block-editor-block-list__block-selection-button {
	// Should be invisible but not unfocusable.
	opacity: 0;
	font-size: 1px;
	height: 1px;
	padding: 0;
}

.block-editor-block-list__layout .block-editor-block-list__block {
	position: relative;

	// Break long strings of text without spaces so they don't overflow the block.
	overflow-wrap: break-word;

	.reusable-block-edit-panel * {
		z-index: z-index(".block-editor-block-list__block .reusable-block-edit-panel *");
	}

	/**
	 * Notices
	 */

	.components-placeholder .components-with-notices-ui {
		margin: -10px 0 12px 0;
	}

	.components-with-notices-ui {
		margin: 0 0 12px 0;
		width: 100%;

		.components-notice {
			margin-left: 0;
			margin-right: 0;

			.components-notice__content {
				font-size: $default-font-size;
			}
		}
	}


	/**
	 * Block Layout
	 */

	// Navigate mode & Focused wrapper.
	// We're using a pseudo element to overflow placeholder borders
	// and any border inside the block itself.
	&:not([contenteditable]):focus {
		outline: none;

		&::after {
			position: absolute;
			z-index: 1;
			pointer-events: none;
			content: "";
			top: $border-width;
			bottom: $border-width;
			left: $border-width;
			right: $border-width;

			// 2px outside.
			box-shadow: 0 0 0 $border-width-focus var(--wp-admin-theme-color);
			border-radius: $radius-block-ui - $border-width; // Border is outset, so so subtract the width to achieve correct radius.

			// Show a light color for dark themes.
			.is-dark-theme & {
				box-shadow: 0 0 0 $border-width-focus $dark-theme-focus;
			}
		}
	}

	// Spotlight mode.
	&.is-focus-mode:not(.is-multi-selected) {
		opacity: 0.5;
		transition: opacity 0.1s linear;
		@include reduce-motion("transition");

		&:not(.is-focused) .block-editor-block-list__block,
		&.is-focused {
			opacity: 1;
		}
	}

	// Active entity spotlight.
	&.has-active-entity:not(.is-focus-mode) {
		opacity: 0.5;
		transition: opacity 0.1s linear;
		@include reduce-motion("transition");

		&.is-active-entity,
		&.has-child-selected,
		&:not(.has-child-selected) .block-editor-block-list__block,
		&.is-active-entity .block-editor-block-list__block,
		.is-active-entity .block-editor-block-list__block {
			opacity: 1;
		}
	}

	/**
	* Block styles and alignments
	*/
	&::after {
		content: "";
		pointer-events: none;
		position: absolute;
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;
		border-radius: $radius-block-ui;
		box-shadow: 0 0 0 $border-width-focus transparent;
	}

	// Warnings
	&.has-warning {
		min-height: ( $block-padding + $block-spacing ) * 2;

		// When a block has a warning, you shouldn't be able to manipulate the contents.
		> * {
			pointer-events: none;
			user-select: none;
		}

		// Allow the warning action buttons to be manipulable.
		.block-editor-warning {
			pointer-events: all;
		}
	}

	// Scrim overlay.
	&.has-warning::after {
		content: "";
		position: absolute;
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;
		border-radius: $radius-block-ui;
		background-color: rgba($white, 0.4);
	}

	// Avoid conflict with the multi-selection highlight color.
	&.has-warning.is-multi-selected::after {
		background-color: transparent;
	}

	// Reusable blocks clickthrough overlays.
	&.is-reusable > .block-editor-inner-blocks > .block-editor-block-list__layout.has-overlay {
		// Remove only the top click overlay.
		&::after {
			display: none;
		}

		// Restore it for subsequent.
		.block-editor-block-list__layout.has-overlay::after {
			display: block;
		}
	}

	// Select tool/navigation mode shows the default cursor until an additional click edits.
	.is-navigate-mode & {
		cursor: default;
	}

	// Clear floats.
	&[data-clear="true"] {
		float: none;
	}

	// This essentially duplicates the mobile styles for the appender component.
	// It would be nice to be able to use element queries in that component instead https://github.com/tomhodgins/element-queries-spec
	.block-editor-block-list__layout {
		.block-editor-default-block-appender .block-editor-inserter {
			left: auto;
			right: $grid-unit-10;
		}
	}
}

// Extra specificity needed to override default element margins like lists (ul).
.block-editor-block-list__layout .wp-block {
	margin-left: auto;
	margin-right: auto;
}

.wp-block {
	// Alignments.
	&[data-align="left"],
	&[data-align="right"] {
		width: 100%;

		// When images are floated, the block itself should collapse to zero height.
		height: 0;

		&::before {
			content: none;
		}
	}

	&[data-align="left"] > *,
	&[data-align="right"] > * {
		// Without z-index, won't be clickable as "above" adjacent content.
		z-index: z-index("{core/image aligned left or right} .wp-block");
	}

	// Left.
	&[data-align="left"] > * {
		// This is in the editor only; the image should be floated on the frontend.
		/*!rtl:begin:ignore*/
		float: left;
		margin-right: 2em;
		/*!rtl:end:ignore*/
	}

	// Right.
	&[data-align="right"] > * {
		// Right: This is in the editor only; the image should be floated on the frontend.
		/*!rtl:begin:ignore*/
		float: right;
		margin-left: 2em;
		/*!rtl:end:ignore*/
	}

	// Wide and full-wide.
	&[data-align="full"],
	&[data-align="wide"] {
		clear: both;
	}
}

/**
 * In-Canvas Inserter
 */

.block-editor-block-list .block-editor-inserter {
	margin: $grid-unit-10;
	cursor: move; // Fallback for IE/Edge < 14
	cursor: grab;
}

// Insertion point (includes inbetween/sibling inserter and insertion indicator)
.block-editor-block-list__insertion-point {
	position: relative;
	z-index: z-index(".block-editor-block-list__insertion-point");
	margin-top: -$block-padding;

	&.is-insert-after {
		margin-top: $block-padding;
	}
}

.block-editor-block-list__insertion-point-indicator {
	position: absolute;
	top: calc(50% - #{ $border-width });
	height: $border-width-focus;
	left: 0;
	right: 0;
	background: var(--wp-admin-theme-color);
}

// This is the clickable plus.
.block-editor-block-list__insertion-point-inserter {
	// Don't show on mobile.
	display: none;
	@include break-mobile() {
		display: flex;
	}

	justify-content: center;

	// Hide the inserter above the selected block.
	&.is-inserter-hidden .block-editor-inserter__toggle {
		visibility: hidden;
		pointer-events: none;
	}
}

.block-editor-block-list__block-popover-inserter {
	position: absolute;
	top: -9999em;
	margin-bottom: $block-padding;

	&.is-visible {
		position: static;
	}
}

// Sibling inserter / "inbetweenserter".
.block-editor-block-list__empty-block-inserter,
.block-editor-default-block-appender,
.block-editor-block-list__insertion-point-inserter,
.block-editor-block-list__block-popover-inserter {
	.block-editor-inserter__toggle.components-button.has-icon {
		// Basic look
		background: $gray-900;
		border-radius: $radius-block-ui;
		color: $white;
		padding: 0;

		// Special dimensions for this button.
		min-width: $button-size-small;
		height: $button-size-small;

		&:hover {
			color: $white;
		}
	}
}


.block-editor-block-list__insertion-point-inserter,
.block-editor-block-list__block-popover-inserter {
	.block-editor-inserter__toggle.components-button {
		// Fade it in after a delay.
		animation: block-editor-inserter__toggle__fade-in-animation-delayed 0.3s ease;
		animation-fill-mode: forwards;
		@include reduce-motion("animation");
	}
}

@keyframes block-editor-inserter__toggle__fade-in-animation-delayed {
	0% {
		opacity: 0;
	}
	80% {
		opacity: 0;
	}
	100% {
		opacity: 1;
	}
}

@keyframes block-editor-inserter__toggle__fade-in-animation {
	from {
		opacity: 0;
		transform: scale(0);
	}
	to {
		opacity: 1;
		transform: scale(1);
	}
}

// Hide the appender that sits at the end of block lists, when inside a nested block,
// unless the block itself, or a parent, is selected.
.wp-block .block-list-appender .block-editor-inserter__toggle {
	animation: block-editor-inserter__toggle__fade-in-animation 0.1s ease;
	animation-fill-mode: forwards;
	@include reduce-motion("animation");
}

.block-editor-block-list__block:not(.is-selected):not(.has-child-selected) .block-editor-default-block-appender {
	display: none;

	.block-editor-inserter__toggle {
		opacity: 0;
		transform: scale(0);
	}
}

// This is the edge-to-edge hover area that contains the plus.
.block-editor-block-list__block {
	> .block-editor-block-list__insertion-point {
		position: absolute;
		top: -$block-padding - $block-spacing / 2;

		// Matches the whole empty space between two blocks.
		height: $block-padding * 2;
		bottom: auto;

		// Match width of actual content.
		left: $block-padding;
		right: $block-padding;
	}
}

.block-editor-block-list__block .block-editor-block-list__block-html-textarea {
	display: block;
	margin: 0;
	padding: $grid-unit-15;
	width: 100%;
	border: none;
	outline: none;
	border-radius: 2px;
	box-shadow: inset 0 0 0 $border-width $gray-900;
	resize: none;
	overflow: hidden;
	font-family: $editor-html-font;
	font-size: $text-editor-font-size;
	line-height: 1.5;
	transition: padding 0.2s linear;
	@include reduce-motion("transition");

	&:focus {
		box-shadow: inset 0 0 0 $border-width-focus var(--wp-admin-theme-color);
	}
}


/**
 * Block Toolbar when contextual.
 */

.block-editor-block-contextual-toolbar {
	// Block UI appearance.
	border: $border-width solid $gray-900;
	border-radius: $radius-block-ui;
	background-color: $white;

	.block-editor-block-toolbar .components-toolbar-group,
	.block-editor-block-toolbar .components-toolbar {
		border-right-color: $gray-900;
	}

	.block-editor-block-mover-button {
		overflow: hidden;
	}

	// Extra specificity to override standard toolbar button styles.
	.block-editor-block-mover.is-horizontal .block-editor-block-mover-button.block-editor-block-mover-button {
		min-width: $block-toolbar-height/2;
		width: $block-toolbar-height/2;
	}

	.block-editor-block-mover:not(.is-horizontal) {
		// Position SVGs.
		.block-editor-block-mover-button {
			&.is-up-button {
				svg {
					margin-top: 2px;
				}
			}

			&.is-down-button {
				svg {
					margin-bottom: 3px;
				}
			}

			&:focus::before {
				left: 0 !important;
				min-width: 0;
				width: 100%;
			}
		}
	}
}


/**
 * Block Label for Navigation/Selection Mode
 */

.block-editor-block-list__block-selection-button {
	display: block;
	z-index: z-index(".block-editor-block-list__block-selection-button");

	// The button here has a special style to appear as a toolbar.
	.components-button {
		font-size: $default-font-size;
		height: $block-toolbar-height - $border-width - $border-width;
		padding: $grid-unit-15 $grid-unit-20;

		// Position this to align with the block toolbar.
		position: relative;
		top: -$border-width;

		// Block UI appearance.
		box-shadow: 0 0 0 $border-width $gray-900;
		border-radius: $radius-block-ui - $border-width; // Border is outset, so so subtract the width to achieve correct radius.
		background-color: $white;

		// When button is focused, it receives a box-shadow instead of the border.
		&:focus {
			box-shadow: 0 0 0 $border-width-focus var(--wp-admin-theme-color);
		}
	}
}


/**
 * Warnings.
 */

.block-editor-block-list__block .block-editor-warning {
	z-index: z-index(".block-editor-warning");
	position: relative;

	&.block-editor-block-list__block-crash-warning {
		// The block crash warning has no block preview underneath it.
		// The lack of a preview combined with the negative margin that
		// the warning normally has results in crashed blocks overlapping
		// any blocks that come after them. Resetting the margin to `auto`
		// solves this.
		margin-bottom: auto;
	}
}


/**
 * Popovers.
 */

.block-editor-block-list__insertion-point-popover.is-without-arrow {
	z-index: z-index(".block-editor-block-list__insertion-point-popover");
	position: absolute;

	.components-popover__content.components-popover__content { // Needs specificity.
		background: none;
		border: none;
		box-shadow: none;
		overflow-y: visible;
		margin-left: 0;
	}
}

// Hide the popover block editor list while dragging.
// Using a hacky animation to delay hiding the element.
// It's needed because if we hide the element immediately upon dragging,
// the dragging will end immediately since there are no elements to be dragged anymore.
// Fortunately, we only have to keep it visible for a frame immediately after dragging,
// after that, we can safely hide it altogether.
@keyframes hide-during-dragging {
	to {
		position: fixed;
		transform: translate(9999px, 9999px);
	}
}

.components-popover.block-editor-block-list__block-popover {
	z-index: z-index(".block-editor-block-list__block-popover");
	position: absolute;

	.components-popover__content {
		margin: 0 !important;
		min-width: auto;
		width: max-content;
		background: none;
		border: none;
		box-shadow: none;
		overflow-y: visible;

		// Allow clicking through the toolbar holder.
		pointer-events: none;

		> * {
			pointer-events: all;
		}

		// Position the block toolbar.
		.block-editor-block-list__block-selection-button,
		.block-editor-block-contextual-toolbar {
			margin-bottom: $grid-unit-15;
		}
	}

	.is-dragging-components-draggable & {
		opacity: 0;
		// Use a minimal duration to delay hiding the element, see hide-during-dragging animation for more details.
		// It's essential to hide the toolbar/popover so that `dragEnter` events can pass through them to the underlying elements.
		animation: hide-during-dragging 1ms linear forwards;
	}
}

.is-dragging-components-draggable .components-tooltip {
	display: none;
}
