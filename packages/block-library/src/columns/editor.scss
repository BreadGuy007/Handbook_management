// These margins make sure that nested blocks stack/overlay with the parent block chrome
// This is sort of an experiment at making sure the editor looks as much like the end result as possible
// Potentially the rules here can apply to all nested blocks and enable stacking, in which case it should be moved elsewhere
// When using CSS grid, margins do not collapse on the container.
.wp-block-columns .editor-block-list__layout {
	margin-left: 0;
	margin-right: 0;

	// This max-width is used to constrain the main editor column, it should not cascade into columns
	.editor-block-list__block {
		max-width: none;
	}
}

// Fullwide: show margin left/right to ensure there's room for the side UI
// This is not a 1:1 preview with the front-end where these margins would presumably be zero
// @todo this could be revisited, by for example showing this margin only when the parent block was selected first
// Then at least an unselected columns block would be an accurate preview
.editor-block-list__block[data-align="full"] .wp-block-columns .editor-block-list__layout {
	&:first-child {
		margin-left: $block-side-ui-width + $block-side-ui-clearance;
	}
	&:last-child {
		margin-right: $block-side-ui-width + $block-side-ui-clearance;
	}
}

// This block has flex container children. Flex container margins do not collapse: https://www.w3.org/TR/css-flexbox-1/#flex-containers.
// Therefore, let's at least not add any additional margins here.
// The goal is for the editor to look more like the front-end.
.editor-block-list__layout .editor-block-list__block[data-type="core/columns"] > .editor-block-list__block-edit,
.editor-block-list__layout .editor-block-list__block[data-type="core/column"] > .editor-block-list__block-edit {
	margin-top: 0;
	margin-bottom: 0;
}

.wp-block-columns {
	display: block;

	> .editor-inner-blocks > .editor-block-list__layout {
		display: flex;

		// Responsiveness: Allow wrapping on mobile.
		flex-wrap: wrap;

		@include break-medium() {
			flex-wrap: nowrap;
		}

		> [data-type="core/column"] {
			display: flex;
			flex-direction: column;
			flex: 1;

			// The Column block is a child of the Columns block and is mostly a passthrough container.
			// Therefore it shouldn't add additional paddings and margins, so we reset these, and compensate for margins.
			// @todo In the future, if a passthrough feature lands, it would be good to apply these rules to such an element in a more generic way.
			margin-top: -$block-padding;
			margin-bottom: -$block-padding;

			// On mobile, only a single column is shown, so match adjacent block paddings.
			padding-left: 0;
			padding-right: 0;
			margin-left: -$block-padding;
			margin-right: -$block-padding;
			@include break-small () {
				padding-left: $block-padding;
				padding-right: $block-padding;
				margin-right: inherit;
				// Every .editor-block-list__block has auto-left/right margins, which centers columns.
				// Since they aren't centered on the front-end, we explicitly set a zero left margin here.
				margin-left: 0;
			}

			@include break-small() {
				> .editor-block-contextual-toolbar {
					top: $block-toolbar-height - $border-width;
					transform: translateY(-$block-toolbar-height - $border-width);
					margin-left: -$block-padding - $block-padding - $border-width;
				}

				> .editor-block-list__block-edit::before {
					top: 0;
					right: 0;
					bottom: 0;
					left: 0;
				}

				> .editor-block-list__breadcrumb {
					margin-right: -$block-padding - $border-width;
				}
			}

			// Responsiveness: Show at most one columns on mobile.
			flex-basis: 100%;

			// Beyond mobile, allow 2 columns.
			@include break-small() {
				flex-basis: 50%;
				flex-grow: 0;
			}

			// Add space between columns. Themes can customize this if they wish to work differently.
			// This has to match the same padding applied in style.scss.
			// Only apply this beyond the mobile breakpoint, as there's only a single column on mobile.
			@include break-small() {
				> .editor-block-list__block-edit {
					padding-left: $grid-size-large;
					padding-right: $grid-size-large;
				}

				&:nth-child(odd) > .editor-block-list__block-edit {
					padding-left: 0;
				}

				&:nth-child(even) > .editor-block-list__block-edit {
					padding-right: 0;
				}
			}

			@include break-medium() {
				&:not(:first-child) > .editor-block-list__block-edit {
					padding-left: $grid-size-large;
				}

				&:not(:last-child) > .editor-block-list__block-edit {
					padding-right: $grid-size-large;
				}
			}
		}
	}
}
