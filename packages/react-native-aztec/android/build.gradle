buildscript {
    ext {
        gradlePluginVersion = '3.4.2'
        kotlinVersion = '1.3.61'
        supportLibVersion = '28.0.0'
        tagSoupVersion = '1.2.1'
        glideVersion = '3.7.0'
        picassoVersion = '2.5.2'
        robolectricVersion = '3.5.1'
        jUnitVersion = '4.12'
        jSoupVersion = '1.10.3'
        wordpressUtilsVersion = '1.22'
        espressoVersion = '3.0.1'
        aztecVersion = 'b8fa76f10346f6e8b979697154d3680f96cb79ff'
    }

    repositories {
        jcenter()
        google()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$gradlePluginVersion"
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.github.dcendents.android-maven'

group = 'com.github.wordpress-mobile.gutenberg-mobile'

// fallback flag value for when lib is compiled individually (e.g. via jitpack)
project.ext.buildGutenbergFromSource = false

// The sample build uses multiple directories to
// keep boilerplate and common code separate from
// the main sample code.
List<String> dirs = [
        'main',     // main sample code; look here for the interesting stuff.
        'common',   // components that are reused by multiple samples
        'template'] // boilerplate code that is generated by the sample template process

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            dirs.each { dir ->
                java.srcDirs "src/${dir}/java"
                java.srcDirs += "src/${dir}/kotlin"
                res.srcDirs "src/${dir}/res"
            }
        }

        androidTest.setRoot('tests')
        androidTest.java.srcDirs = ['tests/src']
    }

    lintOptions {
        disable 'GradleCompatible'
        abortOnError false
    }
}

repositories {
    jcenter()
    google()

    maven { url "https://jitpack.io" }

    if (!rootProject.ext.buildGutenbergFromSource) {
        // if not building from source (where the node_modules dir is used), use a remote RN maven repo
        def reactNativeRepo = 'https://dl.bintray.com/wordpress-mobile/react-native-mirror/'
        println "Will use the RN maven repo at ${reactNativeRepo}"
        maven { url reactNativeRepo }
    }
}

dependencies {
    api "com.github.wordpress-mobile.WordPress-Aztec-Android:aztec:$aztecVersion"
    api "com.github.wordpress-mobile.WordPress-Aztec-Android:wordpress-shortcodes:$aztecVersion"
    api "com.github.wordpress-mobile.WordPress-Aztec-Android:wordpress-comments:$aztecVersion"
    api "com.github.wordpress-mobile.WordPress-Aztec-Android:glide-loader:$aztecVersion"
    api "org.wordpress:utils:$wordpressUtilsVersion"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    implementation 'androidx.appcompat:appcompat:1.0.0'

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    testImplementation 'junit:junit:4.12'

    def reactNativeVersion = reactNativeVersion()
    logger.quiet("Using react-native version: $reactNativeVersion")
    implementation "com.facebook.react:react-native:$reactNativeVersion"
}

// Returns react-native version based on environment
def reactNativeVersion() {
    if (rootProject.ext.buildGutenbergFromSource) {
        return '+'
    }

    def packageFile = new File("$projectDir/../../../package.json")
    def packageContent = new groovy.json.JsonSlurper().parseText(packageFile.text)
    return packageContent['devDependencies']['react-native']
}
