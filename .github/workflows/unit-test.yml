name: Unit Tests

on:
  pull_request:
    paths-ignore:
    - '**.md'
  push:
    branches: [master]
    paths-ignore:
    - '**.md'

jobs:
  unit-js:
    name: JavaScript

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Use Node.js 14.x
      uses: actions/setup-node@v1
      with:
        node-version: 14.x

    - name: Npm install and build
      # It's not necessary to run the full build, since Jest can interpret
      # source files with `babel-jest`. Some packages have their own custom
      # build tasks, however. These must be run.
      run: |
        npm ci
        npx lerna run build

    - name: Running the tests
      run: npm run test-unit -- --ci --maxWorkers=2 --cacheDirectory="$HOME/.jest-cache"

  unit-php:
    name: PHP

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Use Node.js 14.x
      uses: actions/setup-node@v1
      with:
        node-version: 14.x

    - name: Npm install and build
      run: |
        npm ci
        npm run build

    - name: Install WordPress
      run: |
        chmod -R 767 ./ # TODO: Possibly integrate in wp-env
        npm run wp-env start

    - name: Running lint check
      run: npm run lint-php

    - name: Running single site unit tests
      run: npm run test-unit-php
      if: ${{ success() || failure() }}
    
    - name: Running multisite unit tests
      run: npm run test-unit-php-multisite
      if: ${{ success() || failure() }}


  mobile-unit-js:
    name: Mobile

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Use Node.js 14.x
      uses: actions/setup-node@v1
      with:
        node-version: 14.x

    - name: Npm install and build
      # It's not necessary to run the full build, since Jest can interpret
      # source files with `babel-jest`. Some packages have their own custom
      # build tasks, however. These must be run.
      run: |
        npm ci
        npx lerna run build

    - name: Running the tests
      run: npm run test-unit:native -- --ci --maxWorkers=2 --cacheDirectory="$HOME/.jest-cache"
