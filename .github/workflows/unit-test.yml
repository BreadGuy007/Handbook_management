name: Unit Tests

# Since Unit Tests are required to pass for each PR,
# we cannot disable them for documentation-only changes.
on:
    pull_request:
    push:
        branches:
            - trunk
            - 'wp/**'

jobs:
    unit-js:
        name: JavaScript
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                node: [12, 14]

        steps:
            - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # v2.3.4

            - name: Use Node.js ${{ matrix.node }}.x
              uses: actions/setup-node@46071b5c7a2e0c34e49c3cb8a0e792e86e18d5ea # v2.1.5
              with:
                  node-version: ${{ matrix.node }}

            - name: Cache node modules
              uses: actions/cache@26968a09c0ea4f3e233fdddbafd1166051a095f6 # v2.1.4
              env:
                  cache-name: cache-node-modules-${{ matrix.node }}
              with:
                  # npm cache files are stored in `~/.npm` on Linux/macOS
                  path: ~/.npm
                  key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

            - name: Npm install and build
              # It's not necessary to run the full build, since Jest can interpret
              # source files with `babel-jest`. Some packages have their own custom
              # build tasks, however. These must be run.
              run: |
                  npm ci
                  npx lerna run build

            - name: Running the tests
              run: npm run test-unit -- --ci --maxWorkers=2 --cacheDirectory="$HOME/.jest-cache"

            - name: Running the date tests
              run: npm run test-unit:date -- --ci --maxWorkers=2 --cacheDirectory="$HOME/.jest-cache"

    unit-php:
        name: PHP

        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # v2.3.4

            - name: Use Node.js 14.x
              uses: actions/setup-node@46071b5c7a2e0c34e49c3cb8a0e792e86e18d5ea # v2.1.5
              with:
                  node-version: 14.x

            - name: Cache node modules
              uses: actions/cache@26968a09c0ea4f3e233fdddbafd1166051a095f6 # v2.1.4
              env:
                  cache-name: cache-node-modules
              with:
                  # npm cache files are stored in `~/.npm` on Linux/macOS
                  path: ~/.npm
                  key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

            - name: Npm install and build
              run: |
                  npm ci
                  npm run build

            - name: Install WordPress
              run: |
                  npm run wp-env start

            - name: Running lint check
              run: npm run lint-php

            - name: Running single site unit tests
              run: npm run test-unit-php
              if: ${{ success() || failure() }}

            - name: Running multisite unit tests
              run: npm run test-unit-php-multisite
              if: ${{ success() || failure() }}

    mobile-unit-js:
        name: Mobile

        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # v2.3.4

            - name: Use Node.js 14.x
              uses: actions/setup-node@46071b5c7a2e0c34e49c3cb8a0e792e86e18d5ea # v2.1.5
              with:
                  node-version: 14.x

            - name: Cache node modules
              uses: actions/cache@26968a09c0ea4f3e233fdddbafd1166051a095f6 # v2.1.4
              env:
                  cache-name: cache-node-modules
              with:
                  # npm cache files are stored in `~/.npm` on Linux/macOS
                  path: ~/.npm
                  key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

            - name: Npm install and build
              # It's not necessary to run the full build, since Jest can interpret
              # source files with `babel-jest`. Some packages have their own custom
              # build tasks, however. These must be run.
              run: |
                  npm ci
                  npx lerna run build

            - name: Running the tests
              run: npm run test-unit:native -- --ci --maxWorkers=2 --cacheDirectory="$HOME/.jest-cache"
